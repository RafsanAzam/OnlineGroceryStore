@{
    Layout = null;
}
@model Cart

<ul class="list-group list-group-flush">
    @foreach (var item in Model.CartItems)
    {
        <li class="list-group-item">
            <div class="row">
                <div class="col-md-4">
                    <img src="@Url.Content(item.Product.ImageUrl)" class="img-fluid" alt="@item.Product.Name" />
                </div>
                <div class="col-md-8">
                    <h5>@item.Product.Name</h5>
                    <p>Price: @item.Product.Price</p>
                    <p>Quantity: @item.Quantity</p>
                    <!-- Add any additional details -->
                </div>
            </div>
            <div class="quantity-control">
                <button class="quantity-decrease" data-cart-item-id="@item.CartItemId">-</button>
                <span class="quantity-display">@item.Quantity</span>
                <button class="quantity-increase" data-cart-item-id="@item.CartItemId">+</button>
            </div>

        </li>

    }

</ul>

<div class="cart-total">
    Total Price: <span id="total-price">$@ViewBag.TotalPrice</span>
</div>
<div class="cart-actions">
    <button id="clear-cart-btn" class="btn btn-danger">Clear Cart</button>
</div>

<script>
    $(document).ready(function () {
        // Decrease item quantity
        $('.quantity-decrease').click(function () {
            var cartItemId = $(this).data('cart-item-id');
            var currentQuantity = parseInt($(this).siblings('.quantity-display').text());
            if (currentQuantity > 1) {
                updateCartItemQuantity(cartItemId, currentQuantity - 1);
            }
        });

        // Increase item quantity
        $('.quantity-increase').click(function () {
            var cartItemId = $(this).data('cart-item-id');
            var currentQuantity = parseInt($(this).siblings('.quantity-display').text());
            updateCartItemQuantity(cartItemId, currentQuantity + 1);
        });

        // Function to update item quantity
        function updateCartItemQuantity(cartItemId, newQuantity) {
            $.ajax({
                url: '/Cart/UpdateQuantity',
                type: 'POST',
                data: {
                    cartItemId: cartItemId,
                    quantity: newQuantity
                },
                success: function (response) {
                    // Update the quantity display
                    $('[data-cart-item-id="' + cartItemId + '"]').siblings('.quantity-display').text(newQuantity);
                    // Calculate and update the total price
                    updateTotalPrice();
                },
                error: function (error) {
                    console.error("Error updating cart item quantity:", error);
                }
            });
        }

        // Function to update the total price
        function updateTotalPrice() {
            var totalPrice = 0;
            $('.quantity-display').each(function () {
                var quantity = parseInt($(this).text());
                var price = parseFloat($(this).closest('.list-group-item').find('.col-md-8 p:nth-child(2)').text().split(': ')[1]);
                totalPrice += quantity * price;
            });
            $('#total-price').text('$' + totalPrice.toFixed(2));
        }
        $('#clear-cart-btn').click(function () {
            if (confirm("Are you sure you want to clear your cart?")) {
                $.ajax({
                    url: '/Cart/ClearCart',
                    type: 'POST',
                    data: { cartId: 1 }, // Pass the cart ID or any other identifier
                    success: function (response) {
                        // Handle success, like refreshing the cart display
                        location.reload(); // Reload the page
                    },
                    error: function (error) {
                        console.error("Error clearing cart:", error);
                    }
                });
            }
        });
    });

</script>
